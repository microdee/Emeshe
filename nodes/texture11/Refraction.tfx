
#include "../../../mp.fxh/pows.fxh"
#include "../../../mp.fxh/Materials.fxh"
#include "../../../mp.fxh/MRE.fxh"
#include "../../../mp.fxh/DiscSample.fxh"

Texture2D PrevTex: PREVIOUS;
Texture2D ColorTex: INITIAL;

Texture2DArray Environments;
Texture2DArray RefractionMaps;

float2 R : TARGETSIZE;

cbuffer controls : register(b0)
{
	float4x4 EnvTransform;
	bool IsInitial = true;
	float EnvStrength = 1;
	float Blur = 0;
	float MaxMIPlevel = 8;
	//float3 RefractIndices = { 0.80, 0.82, 0.84 };
};

SamplerState s0 <string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=WRAP;
	AddressV=WRAP;
	AddressW=WRAP;
	//MipLODBias = -1;
};


float4 pRef(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float stencil = GetStencil(R, uv);
	uint matid = GetMatID(s0, uv);
	float4 col = float4(0,0,0,1);

	bool KnowRefract = KnowFeature(matid, MF_REFRACTION_SPHEREMAP);

	if((stencil > 0) && KnowRefract)
	{
		float4 input = ColorTex.Sample(s0, uv);
		float4 diffcol = float4(Color.Sample(s0, uv).rgb, 1);
		float2 SceneUV = 0;
		bool KnowRrMap = KnowFeature(matid, MF_REFRACTION_MAP);

		if(KnowRrMap)
		{
			SceneUV = GetUV(s0, uv);
		}

		float3 vPos = GetViewPos(s0, uv);
		float3 onorm = Normals.Sample(s0,uv).xyz;
		float3 norm = mul(float4(onorm,0),EnvTransform).xyz;
		if(!IsInitial) col = input;

		float3 rrV = -normalize(vPos);
		float3 bn = normalize(norm);

		float3 rrammap = 1;
		float rrroughmap = 1;
		if(KnowRrMap)
		{
			float ammapslice = GetFloat(matid, MF_REFRACTION_MAP, MF_REFRACTION_MAP_AMOUNTMAPID);
			float roughmapslice = GetFloat(matid, MF_REFRACTION_MAP, MF_REFRACTION_MAP_ROUGHNESSMAPID);
			if(ammapslice == roughmapslice)
			{
				float4 map = RefractionMaps.SampleLevel(s0, float3(SceneUV, ammapslice), 0);
				rrammap = map.rgb;
				rrroughmap = map.a;
			}
			else
			{
				rrammap = RefractionMaps.SampleLevel(s0, float3(SceneUV, ammapslice), 0).rgb;
				rrroughmap = RefractionMaps.SampleLevel(s0, float3(SceneUV, roughmapslice), 0).a;
			}
		}

		float rrMul = GetFloat(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_MULTIPLY);
		float rrBlur = GetFloat(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_BLUR) * Blur * rrroughmap;
		float rrSlice = GetFloat(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_ENVID);
		float rrStrength = GetFloat(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_STRENGTH) * EnvStrength;

		float2 fresnel = GetFloat2(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_FRESNEL);
		float2 fresnelPow = GetFloat2(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_FRESNELPOWER);
		float3 IOR = GetFloat3(matid, MF_REFRACTION_SPHEREMAP, MF_REFRACTION_SPHEREMAP_IOR);
		float2 rrFresnel = pow(saturate(dot(onorm, rrV) + lerp(1,-1,fresnel)), fresnelPow);

		const half4 colors[3] =
	    {
	    	{ 1, 0, 0, 1 },
	    	{ 0, 1, 0, 1 },
	    	{ 0, 0, 1, 1 },
		};
		float4 transColor = 0;
		float4 sTransColor = 0;
	  	bool fail = false;
	    for(int j=0; j<3; j++) {
	    	float3 rrT = refract(-rrV, bn, IOR[j]);
			rrT = mul(float4(rrT,0), CamViewInv).xyz;
	    	transColor += DiscSample(Environments, s0, rrT, rrBlur, rrSlice, MaxMIPlevel) * colors[j];
			sTransColor += Environments.SampleLevel(s0, float3(DirToUV(rrT), rrSlice), 0) * colors[j];
		}

		transColor *= rrFresnel.x;
		float4 outcol = lerp(transColor, sTransColor, rrFresnel.y);

		if(IsInitial)
		{
			float4 rrcol = outcol * rrStrength * 2;
			float4 rrcolmul = lerp(rrcol, rrcol * diffcol, rrMul);
			col.rgb = rrcolmul * rrammap;
			col.a = max(rrammap.r, max(rrammap.g, rrammap.b)) * max(rrFresnel.x, rrFresnel.y);
			return float4(col.rgb, col.a * ColorTex.Sample(s0,uv).a);
		}
		else
		{
			col.rgb += transColor.rgb * rrStrength * 2 * rrammap;
			return float4(col.rgb,ColorTex.Sample(s0,uv).a);
		}
	}
	else return ColorTex.Sample(s0, uv);
	
}

technique10 Main{
	pass P0
	{SetPixelShader(CompileShader(ps_5_0, pRef()));}
}